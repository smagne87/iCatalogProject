#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iCatalogData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="iCatalog")]
	public partial class iCatalogdbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCatalogDetail(CatalogDetail instance);
    partial void UpdateCatalogDetail(CatalogDetail instance);
    partial void DeleteCatalogDetail(CatalogDetail instance);
    partial void InsertCatalogHeader(CatalogHeader instance);
    partial void UpdateCatalogHeader(CatalogHeader instance);
    partial void DeleteCatalogHeader(CatalogHeader instance);
    partial void InsertCategoryOne(CategoryOne instance);
    partial void UpdateCategoryOne(CategoryOne instance);
    partial void DeleteCategoryOne(CategoryOne instance);
    partial void InsertCategoryThree(CategoryThree instance);
    partial void UpdateCategoryThree(CategoryThree instance);
    partial void DeleteCategoryThree(CategoryThree instance);
    partial void InsertCategoryTwo(CategoryTwo instance);
    partial void UpdateCategoryTwo(CategoryTwo instance);
    partial void DeleteCategoryTwo(CategoryTwo instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductsFile(ProductsFile instance);
    partial void UpdateProductsFile(ProductsFile instance);
    partial void DeleteProductsFile(ProductsFile instance);
    partial void InsertUserCatalog(UserCatalog instance);
    partial void UpdateUserCatalog(UserCatalog instance);
    partial void DeleteUserCatalog(UserCatalog instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertVisibility(Visibility instance);
    partial void UpdateVisibility(Visibility instance);
    partial void DeleteVisibility(Visibility instance);
    partial void InsertDevice(Device instance);
    partial void UpdateDevice(Device instance);
    partial void DeleteDevice(Device instance);
    #endregion
		
		public iCatalogdbDataContext() : 
				base(global::iCatalogData.Properties.Settings.Default.iCatalogConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public iCatalogdbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iCatalogdbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iCatalogdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iCatalogdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CatalogDetail> CatalogDetails
		{
			get
			{
				return this.GetTable<CatalogDetail>();
			}
		}
		
		public System.Data.Linq.Table<CatalogHeader> CatalogHeaders
		{
			get
			{
				return this.GetTable<CatalogHeader>();
			}
		}
		
		public System.Data.Linq.Table<CategoryOne> CategoryOnes
		{
			get
			{
				return this.GetTable<CategoryOne>();
			}
		}
		
		public System.Data.Linq.Table<CategoryThree> CategoryThrees
		{
			get
			{
				return this.GetTable<CategoryThree>();
			}
		}
		
		public System.Data.Linq.Table<CategoryTwo> CategoryTwos
		{
			get
			{
				return this.GetTable<CategoryTwo>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductsFile> ProductsFiles
		{
			get
			{
				return this.GetTable<ProductsFile>();
			}
		}
		
		public System.Data.Linq.Table<UserCatalog> UserCatalogs
		{
			get
			{
				return this.GetTable<UserCatalog>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Visibility> Visibilities
		{
			get
			{
				return this.GetTable<Visibility>();
			}
		}
		
		public System.Data.Linq.Table<Device> Devices
		{
			get
			{
				return this.GetTable<Device>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CatalogDetail")]
	public partial class CatalogDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCatalogDetail;
		
		private System.Nullable<int> _IdCatalogHeader;
		
		private System.Nullable<int> _IdProduct;
		
		private System.Nullable<int> _PageOrder;
		
		private EntityRef<CatalogHeader> _CatalogHeader;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCatalogDetailChanging(int value);
    partial void OnIdCatalogDetailChanged();
    partial void OnIdCatalogHeaderChanging(System.Nullable<int> value);
    partial void OnIdCatalogHeaderChanged();
    partial void OnIdProductChanging(System.Nullable<int> value);
    partial void OnIdProductChanged();
    partial void OnPageOrderChanging(System.Nullable<int> value);
    partial void OnPageOrderChanged();
    #endregion
		
		public CatalogDetail()
		{
			this._CatalogHeader = default(EntityRef<CatalogHeader>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCatalogDetail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCatalogDetail
		{
			get
			{
				return this._IdCatalogDetail;
			}
			set
			{
				if ((this._IdCatalogDetail != value))
				{
					this.OnIdCatalogDetailChanging(value);
					this.SendPropertyChanging();
					this._IdCatalogDetail = value;
					this.SendPropertyChanged("IdCatalogDetail");
					this.OnIdCatalogDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCatalogHeader", DbType="Int")]
		public System.Nullable<int> IdCatalogHeader
		{
			get
			{
				return this._IdCatalogHeader;
			}
			set
			{
				if ((this._IdCatalogHeader != value))
				{
					if (this._CatalogHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCatalogHeaderChanging(value);
					this.SendPropertyChanging();
					this._IdCatalogHeader = value;
					this.SendPropertyChanged("IdCatalogHeader");
					this.OnIdCatalogHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProduct", DbType="Int")]
		public System.Nullable<int> IdProduct
		{
			get
			{
				return this._IdProduct;
			}
			set
			{
				if ((this._IdProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductChanging(value);
					this.SendPropertyChanging();
					this._IdProduct = value;
					this.SendPropertyChanged("IdProduct");
					this.OnIdProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageOrder", DbType="Int")]
		public System.Nullable<int> PageOrder
		{
			get
			{
				return this._PageOrder;
			}
			set
			{
				if ((this._PageOrder != value))
				{
					this.OnPageOrderChanging(value);
					this.SendPropertyChanging();
					this._PageOrder = value;
					this.SendPropertyChanged("PageOrder");
					this.OnPageOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogHeader_CatalogDetail", Storage="_CatalogHeader", ThisKey="IdCatalogHeader", OtherKey="IdCatalogHeader", IsForeignKey=true)]
		public CatalogHeader CatalogHeader
		{
			get
			{
				return this._CatalogHeader.Entity;
			}
			set
			{
				CatalogHeader previousValue = this._CatalogHeader.Entity;
				if (((previousValue != value) 
							|| (this._CatalogHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatalogHeader.Entity = null;
						previousValue.CatalogDetails.Remove(this);
					}
					this._CatalogHeader.Entity = value;
					if ((value != null))
					{
						value.CatalogDetails.Add(this);
						this._IdCatalogHeader = value.IdCatalogHeader;
					}
					else
					{
						this._IdCatalogHeader = default(Nullable<int>);
					}
					this.SendPropertyChanged("CatalogHeader");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CatalogDetail", Storage="_Product", ThisKey="IdProduct", OtherKey="IdProduct", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.CatalogDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.CatalogDetails.Add(this);
						this._IdProduct = value.IdProduct;
					}
					else
					{
						this._IdProduct = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CatalogHeader")]
	public partial class CatalogHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCatalogHeader;
		
		private string _CatalogCode;
		
		private string _CatalogDescription;
		
		private System.Nullable<System.DateTime> _DateTo;
		
		private System.Nullable<System.DateTime> _DateFrom;
		
		private System.Nullable<int> _Pages;
		
		private System.Nullable<int> _IdCompany;
		
		private System.Nullable<int> _IdVisibility;
		
		private EntitySet<CatalogDetail> _CatalogDetails;
		
		private EntitySet<UserCatalog> _UserCatalogs;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Visibility> _Visibility;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCatalogHeaderChanging(int value);
    partial void OnIdCatalogHeaderChanged();
    partial void OnCatalogCodeChanging(string value);
    partial void OnCatalogCodeChanged();
    partial void OnCatalogDescriptionChanging(string value);
    partial void OnCatalogDescriptionChanged();
    partial void OnDateToChanging(System.Nullable<System.DateTime> value);
    partial void OnDateToChanged();
    partial void OnDateFromChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFromChanged();
    partial void OnPagesChanging(System.Nullable<int> value);
    partial void OnPagesChanged();
    partial void OnIdCompanyChanging(System.Nullable<int> value);
    partial void OnIdCompanyChanged();
    partial void OnIdVisibilityChanging(System.Nullable<int> value);
    partial void OnIdVisibilityChanged();
    #endregion
		
		public CatalogHeader()
		{
			this._CatalogDetails = new EntitySet<CatalogDetail>(new Action<CatalogDetail>(this.attach_CatalogDetails), new Action<CatalogDetail>(this.detach_CatalogDetails));
			this._UserCatalogs = new EntitySet<UserCatalog>(new Action<UserCatalog>(this.attach_UserCatalogs), new Action<UserCatalog>(this.detach_UserCatalogs));
			this._Company = default(EntityRef<Company>);
			this._Visibility = default(EntityRef<Visibility>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCatalogHeader", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCatalogHeader
		{
			get
			{
				return this._IdCatalogHeader;
			}
			set
			{
				if ((this._IdCatalogHeader != value))
				{
					this.OnIdCatalogHeaderChanging(value);
					this.SendPropertyChanging();
					this._IdCatalogHeader = value;
					this.SendPropertyChanged("IdCatalogHeader");
					this.OnIdCatalogHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogCode", DbType="NVarChar(20)")]
		public string CatalogCode
		{
			get
			{
				return this._CatalogCode;
			}
			set
			{
				if ((this._CatalogCode != value))
				{
					this.OnCatalogCodeChanging(value);
					this.SendPropertyChanging();
					this._CatalogCode = value;
					this.SendPropertyChanged("CatalogCode");
					this.OnCatalogCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogDescription", DbType="NVarChar(500)")]
		public string CatalogDescription
		{
			get
			{
				return this._CatalogDescription;
			}
			set
			{
				if ((this._CatalogDescription != value))
				{
					this.OnCatalogDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CatalogDescription = value;
					this.SendPropertyChanged("CatalogDescription");
					this.OnCatalogDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTo
		{
			get
			{
				return this._DateTo;
			}
			set
			{
				if ((this._DateTo != value))
				{
					this.OnDateToChanging(value);
					this.SendPropertyChanging();
					this._DateTo = value;
					this.SendPropertyChanged("DateTo");
					this.OnDateToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateFrom
		{
			get
			{
				return this._DateFrom;
			}
			set
			{
				if ((this._DateFrom != value))
				{
					this.OnDateFromChanging(value);
					this.SendPropertyChanging();
					this._DateFrom = value;
					this.SendPropertyChanged("DateFrom");
					this.OnDateFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pages", DbType="Int")]
		public System.Nullable<int> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				if ((this._Pages != value))
				{
					this.OnPagesChanging(value);
					this.SendPropertyChanging();
					this._Pages = value;
					this.SendPropertyChanged("Pages");
					this.OnPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCompany", DbType="Int")]
		public System.Nullable<int> IdCompany
		{
			get
			{
				return this._IdCompany;
			}
			set
			{
				if ((this._IdCompany != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCompanyChanging(value);
					this.SendPropertyChanging();
					this._IdCompany = value;
					this.SendPropertyChanged("IdCompany");
					this.OnIdCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdVisibility", DbType="Int")]
		public System.Nullable<int> IdVisibility
		{
			get
			{
				return this._IdVisibility;
			}
			set
			{
				if ((this._IdVisibility != value))
				{
					if (this._Visibility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdVisibilityChanging(value);
					this.SendPropertyChanging();
					this._IdVisibility = value;
					this.SendPropertyChanged("IdVisibility");
					this.OnIdVisibilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogHeader_CatalogDetail", Storage="_CatalogDetails", ThisKey="IdCatalogHeader", OtherKey="IdCatalogHeader")]
		public EntitySet<CatalogDetail> CatalogDetails
		{
			get
			{
				return this._CatalogDetails;
			}
			set
			{
				this._CatalogDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogHeader_UserCatalog", Storage="_UserCatalogs", ThisKey="IdCatalogHeader", OtherKey="IdCatalogHeader")]
		public EntitySet<UserCatalog> UserCatalogs
		{
			get
			{
				return this._UserCatalogs;
			}
			set
			{
				this._UserCatalogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CatalogHeader", Storage="_Company", ThisKey="IdCompany", OtherKey="IdCompany", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CatalogHeaders.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CatalogHeaders.Add(this);
						this._IdCompany = value.IdCompany;
					}
					else
					{
						this._IdCompany = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visibility_CatalogHeader", Storage="_Visibility", ThisKey="IdVisibility", OtherKey="IdVisibility", IsForeignKey=true)]
		public Visibility Visibility
		{
			get
			{
				return this._Visibility.Entity;
			}
			set
			{
				Visibility previousValue = this._Visibility.Entity;
				if (((previousValue != value) 
							|| (this._Visibility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visibility.Entity = null;
						previousValue.CatalogHeaders.Remove(this);
					}
					this._Visibility.Entity = value;
					if ((value != null))
					{
						value.CatalogHeaders.Add(this);
						this._IdVisibility = value.IdVisibility;
					}
					else
					{
						this._IdVisibility = default(Nullable<int>);
					}
					this.SendPropertyChanged("Visibility");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CatalogDetails(CatalogDetail entity)
		{
			this.SendPropertyChanging();
			entity.CatalogHeader = this;
		}
		
		private void detach_CatalogDetails(CatalogDetail entity)
		{
			this.SendPropertyChanging();
			entity.CatalogHeader = null;
		}
		
		private void attach_UserCatalogs(UserCatalog entity)
		{
			this.SendPropertyChanging();
			entity.CatalogHeader = this;
		}
		
		private void detach_UserCatalogs(UserCatalog entity)
		{
			this.SendPropertyChanging();
			entity.CatalogHeader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryOne")]
	public partial class CategoryOne : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCategoryOne;
		
		private string _CategoryName;
		
		private string _CategoryDescription;
		
		private System.Nullable<int> _IdCompany;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategoryOneChanging(int value);
    partial void OnIdCategoryOneChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryDescriptionChanging(string value);
    partial void OnCategoryDescriptionChanged();
    partial void OnIdCompanyChanging(System.Nullable<int> value);
    partial void OnIdCompanyChanged();
    #endregion
		
		public CategoryOne()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategoryOne", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCategoryOne
		{
			get
			{
				return this._IdCategoryOne;
			}
			set
			{
				if ((this._IdCategoryOne != value))
				{
					this.OnIdCategoryOneChanging(value);
					this.SendPropertyChanging();
					this._IdCategoryOne = value;
					this.SendPropertyChanged("IdCategoryOne");
					this.OnIdCategoryOneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDescription", DbType="NVarChar(100)")]
		public string CategoryDescription
		{
			get
			{
				return this._CategoryDescription;
			}
			set
			{
				if ((this._CategoryDescription != value))
				{
					this.OnCategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CategoryDescription = value;
					this.SendPropertyChanged("CategoryDescription");
					this.OnCategoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCompany", DbType="Int")]
		public System.Nullable<int> IdCompany
		{
			get
			{
				return this._IdCompany;
			}
			set
			{
				if ((this._IdCompany != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCompanyChanging(value);
					this.SendPropertyChanging();
					this._IdCompany = value;
					this.SendPropertyChanged("IdCompany");
					this.OnIdCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryOne_Product", Storage="_Products", ThisKey="IdCategoryOne", OtherKey="IdCategoryOne")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CategoryOne", Storage="_Company", ThisKey="IdCompany", OtherKey="IdCompany", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CategoryOnes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CategoryOnes.Add(this);
						this._IdCompany = value.IdCompany;
					}
					else
					{
						this._IdCompany = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.CategoryOne = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.CategoryOne = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryThree")]
	public partial class CategoryThree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCategoryThree;
		
		private string _CategoryName;
		
		private string _CategoryDescription;
		
		private System.Nullable<int> _IdCompany;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategoryThreeChanging(int value);
    partial void OnIdCategoryThreeChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryDescriptionChanging(string value);
    partial void OnCategoryDescriptionChanged();
    partial void OnIdCompanyChanging(System.Nullable<int> value);
    partial void OnIdCompanyChanged();
    #endregion
		
		public CategoryThree()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategoryThree", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCategoryThree
		{
			get
			{
				return this._IdCategoryThree;
			}
			set
			{
				if ((this._IdCategoryThree != value))
				{
					this.OnIdCategoryThreeChanging(value);
					this.SendPropertyChanging();
					this._IdCategoryThree = value;
					this.SendPropertyChanged("IdCategoryThree");
					this.OnIdCategoryThreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDescription", DbType="NVarChar(100)")]
		public string CategoryDescription
		{
			get
			{
				return this._CategoryDescription;
			}
			set
			{
				if ((this._CategoryDescription != value))
				{
					this.OnCategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CategoryDescription = value;
					this.SendPropertyChanged("CategoryDescription");
					this.OnCategoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCompany", DbType="Int")]
		public System.Nullable<int> IdCompany
		{
			get
			{
				return this._IdCompany;
			}
			set
			{
				if ((this._IdCompany != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCompanyChanging(value);
					this.SendPropertyChanging();
					this._IdCompany = value;
					this.SendPropertyChanged("IdCompany");
					this.OnIdCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryThree_Product", Storage="_Products", ThisKey="IdCategoryThree", OtherKey="IdCategoryThree")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CategoryThree", Storage="_Company", ThisKey="IdCompany", OtherKey="IdCompany", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CategoryThrees.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CategoryThrees.Add(this);
						this._IdCompany = value.IdCompany;
					}
					else
					{
						this._IdCompany = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.CategoryThree = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.CategoryThree = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryTwo")]
	public partial class CategoryTwo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCategoryTwo;
		
		private string _CategoryName;
		
		private string _CategoryDescription;
		
		private System.Nullable<int> _IdCompany;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategoryTwoChanging(int value);
    partial void OnIdCategoryTwoChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryDescriptionChanging(string value);
    partial void OnCategoryDescriptionChanged();
    partial void OnIdCompanyChanging(System.Nullable<int> value);
    partial void OnIdCompanyChanged();
    #endregion
		
		public CategoryTwo()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategoryTwo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCategoryTwo
		{
			get
			{
				return this._IdCategoryTwo;
			}
			set
			{
				if ((this._IdCategoryTwo != value))
				{
					this.OnIdCategoryTwoChanging(value);
					this.SendPropertyChanging();
					this._IdCategoryTwo = value;
					this.SendPropertyChanged("IdCategoryTwo");
					this.OnIdCategoryTwoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDescription", DbType="NVarChar(100)")]
		public string CategoryDescription
		{
			get
			{
				return this._CategoryDescription;
			}
			set
			{
				if ((this._CategoryDescription != value))
				{
					this.OnCategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CategoryDescription = value;
					this.SendPropertyChanged("CategoryDescription");
					this.OnCategoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCompany", DbType="Int")]
		public System.Nullable<int> IdCompany
		{
			get
			{
				return this._IdCompany;
			}
			set
			{
				if ((this._IdCompany != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCompanyChanging(value);
					this.SendPropertyChanging();
					this._IdCompany = value;
					this.SendPropertyChanged("IdCompany");
					this.OnIdCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTwo_Product", Storage="_Products", ThisKey="IdCategoryTwo", OtherKey="IdCategoryTwo")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CategoryTwo", Storage="_Company", ThisKey="IdCompany", OtherKey="IdCompany", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CategoryTwos.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CategoryTwos.Add(this);
						this._IdCompany = value.IdCompany;
					}
					else
					{
						this._IdCompany = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTwo = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTwo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCity;
		
		private string _CityName;
		
		private System.Nullable<int> _IdCountry;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCityChanging(int value);
    partial void OnIdCityChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnIdCountryChanging(System.Nullable<int> value);
    partial void OnIdCountryChanged();
    #endregion
		
		public City()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCity", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					this.OnIdCityChanging(value);
					this.SendPropertyChanging();
					this._IdCity = value;
					this.SendPropertyChanged("IdCity");
					this.OnIdCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(50)")]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCountry", DbType="Int")]
		public System.Nullable<int> IdCountry
		{
			get
			{
				return this._IdCountry;
			}
			set
			{
				if ((this._IdCountry != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCountryChanging(value);
					this.SendPropertyChanging();
					this._IdCountry = value;
					this.SendPropertyChanged("IdCountry");
					this.OnIdCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Company", Storage="_Companies", ThisKey="IdCity", OtherKey="IdCity")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_User", Storage="_Users", ThisKey="IdCity", OtherKey="IdCity")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Country", ThisKey="IdCountry", OtherKey="IdCountry", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._IdCountry = value.IdCountry;
					}
					else
					{
						this._IdCountry = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCompany;
		
		private string _CompanyName;
		
		private string _Email;
		
		private string _Password;
		
		private string _Address;
		
		private string _Phone;
		
		private System.Nullable<int> _IdCountry;
		
		private System.Nullable<int> _IdCity;
		
		private string _WebUrl;
		
		private string _CompanyUserName;
		
		private EntitySet<CatalogHeader> _CatalogHeaders;
		
		private EntitySet<CategoryOne> _CategoryOnes;
		
		private EntitySet<CategoryThree> _CategoryThrees;
		
		private EntitySet<CategoryTwo> _CategoryTwos;
		
		private EntitySet<File> _Files;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<Visibility> _Visibilities;
		
		private EntityRef<City> _City;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCompanyChanging(int value);
    partial void OnIdCompanyChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnIdCountryChanging(System.Nullable<int> value);
    partial void OnIdCountryChanged();
    partial void OnIdCityChanging(System.Nullable<int> value);
    partial void OnIdCityChanged();
    partial void OnWebUrlChanging(string value);
    partial void OnWebUrlChanged();
    partial void OnCompanyUserNameChanging(string value);
    partial void OnCompanyUserNameChanged();
    #endregion
		
		public Company()
		{
			this._CatalogHeaders = new EntitySet<CatalogHeader>(new Action<CatalogHeader>(this.attach_CatalogHeaders), new Action<CatalogHeader>(this.detach_CatalogHeaders));
			this._CategoryOnes = new EntitySet<CategoryOne>(new Action<CategoryOne>(this.attach_CategoryOnes), new Action<CategoryOne>(this.detach_CategoryOnes));
			this._CategoryThrees = new EntitySet<CategoryThree>(new Action<CategoryThree>(this.attach_CategoryThrees), new Action<CategoryThree>(this.detach_CategoryThrees));
			this._CategoryTwos = new EntitySet<CategoryTwo>(new Action<CategoryTwo>(this.attach_CategoryTwos), new Action<CategoryTwo>(this.detach_CategoryTwos));
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Visibilities = new EntitySet<Visibility>(new Action<Visibility>(this.attach_Visibilities), new Action<Visibility>(this.detach_Visibilities));
			this._City = default(EntityRef<City>);
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCompany", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCompany
		{
			get
			{
				return this._IdCompany;
			}
			set
			{
				if ((this._IdCompany != value))
				{
					this.OnIdCompanyChanging(value);
					this.SendPropertyChanging();
					this._IdCompany = value;
					this.SendPropertyChanged("IdCompany");
					this.OnIdCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCountry", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> IdCountry
		{
			get
			{
				return this._IdCountry;
			}
			set
			{
				if ((this._IdCountry != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCountryChanging(value);
					this.SendPropertyChanging();
					this._IdCountry = value;
					this.SendPropertyChanged("IdCountry");
					this.OnIdCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCity", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCityChanging(value);
					this.SendPropertyChanging();
					this._IdCity = value;
					this.SendPropertyChanged("IdCity");
					this.OnIdCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebUrl", DbType="NVarchar(100)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string WebUrl
		{
			get
			{
				return this._WebUrl;
			}
			set
			{
				if ((this._WebUrl != value))
				{
					this.OnWebUrlChanging(value);
					this.SendPropertyChanging();
					this._WebUrl = value;
					this.SendPropertyChanged("WebUrl");
					this.OnWebUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyUserName", DbType="nvarchar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CompanyUserName
		{
			get
			{
				return this._CompanyUserName;
			}
			set
			{
				if ((this._CompanyUserName != value))
				{
					this.OnCompanyUserNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyUserName = value;
					this.SendPropertyChanged("CompanyUserName");
					this.OnCompanyUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CatalogHeader", Storage="_CatalogHeaders", ThisKey="IdCompany", OtherKey="IdCompany")]
		public EntitySet<CatalogHeader> CatalogHeaders
		{
			get
			{
				return this._CatalogHeaders;
			}
			set
			{
				this._CatalogHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CategoryOne", Storage="_CategoryOnes", ThisKey="IdCompany", OtherKey="IdCompany")]
		public EntitySet<CategoryOne> CategoryOnes
		{
			get
			{
				return this._CategoryOnes;
			}
			set
			{
				this._CategoryOnes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CategoryThree", Storage="_CategoryThrees", ThisKey="IdCompany", OtherKey="IdCompany")]
		public EntitySet<CategoryThree> CategoryThrees
		{
			get
			{
				return this._CategoryThrees;
			}
			set
			{
				this._CategoryThrees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CategoryTwo", Storage="_CategoryTwos", ThisKey="IdCompany", OtherKey="IdCompany")]
		public EntitySet<CategoryTwo> CategoryTwos
		{
			get
			{
				return this._CategoryTwos;
			}
			set
			{
				this._CategoryTwos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_File", Storage="_Files", ThisKey="IdCompany", OtherKey="IdCompany")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Product", Storage="_Products", ThisKey="IdCompany", OtherKey="IdCompany")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Visibility", Storage="_Visibilities", ThisKey="IdCompany", OtherKey="IdCompany")]
		public EntitySet<Visibility> Visibilities
		{
			get
			{
				return this._Visibilities;
			}
			set
			{
				this._Visibilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Company", Storage="_City", ThisKey="IdCity", OtherKey="IdCity", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._IdCity = value.IdCity;
					}
					else
					{
						this._IdCity = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Company", Storage="_Country", ThisKey="IdCountry", OtherKey="IdCountry", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._IdCountry = value.IdCountry;
					}
					else
					{
						this._IdCountry = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CatalogHeaders(CatalogHeader entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CatalogHeaders(CatalogHeader entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CategoryOnes(CategoryOne entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CategoryOnes(CategoryOne entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CategoryThrees(CategoryThree entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CategoryThrees(CategoryThree entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CategoryTwos(CategoryTwo entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CategoryTwos(CategoryTwo entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Visibilities(Visibility entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Visibilities(Visibility entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCountry;
		
		private string _CountryName;
		
		private EntitySet<City> _Cities;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCountryChanging(int value);
    partial void OnIdCountryChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public Country()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCountry", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCountry
		{
			get
			{
				return this._IdCountry;
			}
			set
			{
				if ((this._IdCountry != value))
				{
					this.OnIdCountryChanging(value);
					this.SendPropertyChanging();
					this._IdCountry = value;
					this.SendPropertyChanged("IdCountry");
					this.OnIdCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="NVarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Cities", ThisKey="IdCountry", OtherKey="IdCountry")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Company", Storage="_Companies", ThisKey="IdCountry", OtherKey="IdCountry")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_User", Storage="_Users", ThisKey="IdCountry", OtherKey="IdCountry")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Files")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdFile;
		
		private string _FileName;
		
		private string _FileDescription;
		
		private System.Data.Linq.Binary _File1;
		
		private System.Nullable<int> _IdCompany;
		
		private EntitySet<ProductsFile> _ProductsFiles;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdFileChanging(int value);
    partial void OnIdFileChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileDescriptionChanging(string value);
    partial void OnFileDescriptionChanged();
    partial void OnFile1Changing(System.Data.Linq.Binary value);
    partial void OnFile1Changed();
    partial void OnIdCompanyChanging(System.Nullable<int> value);
    partial void OnIdCompanyChanged();
    #endregion
		
		public File()
		{
			this._ProductsFiles = new EntitySet<ProductsFile>(new Action<ProductsFile>(this.attach_ProductsFiles), new Action<ProductsFile>(this.detach_ProductsFiles));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdFile", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdFile
		{
			get
			{
				return this._IdFile;
			}
			set
			{
				if ((this._IdFile != value))
				{
					this.OnIdFileChanging(value);
					this.SendPropertyChanging();
					this._IdFile = value;
					this.SendPropertyChanged("IdFile");
					this.OnIdFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(50)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileDescription", DbType="NVarChar(200)")]
		public string FileDescription
		{
			get
			{
				return this._FileDescription;
			}
			set
			{
				if ((this._FileDescription != value))
				{
					this.OnFileDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FileDescription = value;
					this.SendPropertyChanged("FileDescription");
					this.OnFileDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[File]", Storage="_File1", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary File1
		{
			get
			{
				return this._File1;
			}
			set
			{
				if ((this._File1 != value))
				{
					this.OnFile1Changing(value);
					this.SendPropertyChanging();
					this._File1 = value;
					this.SendPropertyChanged("File1");
					this.OnFile1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCompany", DbType="Int")]
		public System.Nullable<int> IdCompany
		{
			get
			{
				return this._IdCompany;
			}
			set
			{
				if ((this._IdCompany != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCompanyChanging(value);
					this.SendPropertyChanging();
					this._IdCompany = value;
					this.SendPropertyChanged("IdCompany");
					this.OnIdCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_ProductsFile", Storage="_ProductsFiles", ThisKey="IdFile", OtherKey="IdFile")]
		public EntitySet<ProductsFile> ProductsFiles
		{
			get
			{
				return this._ProductsFiles;
			}
			set
			{
				this._ProductsFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_File", Storage="_Company", ThisKey="IdCompany", OtherKey="IdCompany", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._IdCompany = value.IdCompany;
					}
					else
					{
						this._IdCompany = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductsFiles(ProductsFile entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_ProductsFiles(ProductsFile entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdProduct;
		
		private string _ProductName;
		
		private string _ProductDescription;
		
		private System.Nullable<int> _IdCategoryOne;
		
		private System.Nullable<int> _IdCategoryTwo;
		
		private System.Nullable<int> _IdCategoryThree;
		
		private System.Nullable<int> _IdCompany;
		
		private EntitySet<CatalogDetail> _CatalogDetails;
		
		private EntitySet<ProductsFile> _ProductsFiles;
		
		private EntityRef<CategoryOne> _CategoryOne;
		
		private EntityRef<CategoryThree> _CategoryThree;
		
		private EntityRef<CategoryTwo> _CategoryTwo;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdProductChanging(int value);
    partial void OnIdProductChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductDescriptionChanging(string value);
    partial void OnProductDescriptionChanged();
    partial void OnIdCategoryOneChanging(System.Nullable<int> value);
    partial void OnIdCategoryOneChanged();
    partial void OnIdCategoryTwoChanging(System.Nullable<int> value);
    partial void OnIdCategoryTwoChanged();
    partial void OnIdCategoryThreeChanging(System.Nullable<int> value);
    partial void OnIdCategoryThreeChanged();
    partial void OnIdCompanyChanging(System.Nullable<int> value);
    partial void OnIdCompanyChanged();
    #endregion
		
		public Product()
		{
			this._CatalogDetails = new EntitySet<CatalogDetail>(new Action<CatalogDetail>(this.attach_CatalogDetails), new Action<CatalogDetail>(this.detach_CatalogDetails));
			this._ProductsFiles = new EntitySet<ProductsFile>(new Action<ProductsFile>(this.attach_ProductsFiles), new Action<ProductsFile>(this.detach_ProductsFiles));
			this._CategoryOne = default(EntityRef<CategoryOne>);
			this._CategoryThree = default(EntityRef<CategoryThree>);
			this._CategoryTwo = default(EntityRef<CategoryTwo>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProduct", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdProduct
		{
			get
			{
				return this._IdProduct;
			}
			set
			{
				if ((this._IdProduct != value))
				{
					this.OnIdProductChanging(value);
					this.SendPropertyChanging();
					this._IdProduct = value;
					this.SendPropertyChanged("IdProduct");
					this.OnIdProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(50)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDescription", DbType="NVarChar(500)")]
		public string ProductDescription
		{
			get
			{
				return this._ProductDescription;
			}
			set
			{
				if ((this._ProductDescription != value))
				{
					this.OnProductDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProductDescription = value;
					this.SendPropertyChanged("ProductDescription");
					this.OnProductDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategoryOne", DbType="Int")]
		public System.Nullable<int> IdCategoryOne
		{
			get
			{
				return this._IdCategoryOne;
			}
			set
			{
				if ((this._IdCategoryOne != value))
				{
					if (this._CategoryOne.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoryOneChanging(value);
					this.SendPropertyChanging();
					this._IdCategoryOne = value;
					this.SendPropertyChanged("IdCategoryOne");
					this.OnIdCategoryOneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategoryTwo", DbType="Int")]
		public System.Nullable<int> IdCategoryTwo
		{
			get
			{
				return this._IdCategoryTwo;
			}
			set
			{
				if ((this._IdCategoryTwo != value))
				{
					if (this._CategoryTwo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoryTwoChanging(value);
					this.SendPropertyChanging();
					this._IdCategoryTwo = value;
					this.SendPropertyChanged("IdCategoryTwo");
					this.OnIdCategoryTwoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategoryThree", DbType="Int")]
		public System.Nullable<int> IdCategoryThree
		{
			get
			{
				return this._IdCategoryThree;
			}
			set
			{
				if ((this._IdCategoryThree != value))
				{
					if (this._CategoryThree.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoryThreeChanging(value);
					this.SendPropertyChanging();
					this._IdCategoryThree = value;
					this.SendPropertyChanged("IdCategoryThree");
					this.OnIdCategoryThreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCompany", DbType="Int")]
		public System.Nullable<int> IdCompany
		{
			get
			{
				return this._IdCompany;
			}
			set
			{
				if ((this._IdCompany != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCompanyChanging(value);
					this.SendPropertyChanging();
					this._IdCompany = value;
					this.SendPropertyChanged("IdCompany");
					this.OnIdCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CatalogDetail", Storage="_CatalogDetails", ThisKey="IdProduct", OtherKey="IdProduct")]
		public EntitySet<CatalogDetail> CatalogDetails
		{
			get
			{
				return this._CatalogDetails;
			}
			set
			{
				this._CatalogDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductsFile", Storage="_ProductsFiles", ThisKey="IdProduct", OtherKey="IdProduct")]
		public EntitySet<ProductsFile> ProductsFiles
		{
			get
			{
				return this._ProductsFiles;
			}
			set
			{
				this._ProductsFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryOne_Product", Storage="_CategoryOne", ThisKey="IdCategoryOne", OtherKey="IdCategoryOne", IsForeignKey=true)]
		public CategoryOne CategoryOne
		{
			get
			{
				return this._CategoryOne.Entity;
			}
			set
			{
				CategoryOne previousValue = this._CategoryOne.Entity;
				if (((previousValue != value) 
							|| (this._CategoryOne.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryOne.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._CategoryOne.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IdCategoryOne = value.IdCategoryOne;
					}
					else
					{
						this._IdCategoryOne = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryOne");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryThree_Product", Storage="_CategoryThree", ThisKey="IdCategoryThree", OtherKey="IdCategoryThree", IsForeignKey=true)]
		public CategoryThree CategoryThree
		{
			get
			{
				return this._CategoryThree.Entity;
			}
			set
			{
				CategoryThree previousValue = this._CategoryThree.Entity;
				if (((previousValue != value) 
							|| (this._CategoryThree.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryThree.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._CategoryThree.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IdCategoryThree = value.IdCategoryThree;
					}
					else
					{
						this._IdCategoryThree = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryThree");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTwo_Product", Storage="_CategoryTwo", ThisKey="IdCategoryTwo", OtherKey="IdCategoryTwo", IsForeignKey=true)]
		public CategoryTwo CategoryTwo
		{
			get
			{
				return this._CategoryTwo.Entity;
			}
			set
			{
				CategoryTwo previousValue = this._CategoryTwo.Entity;
				if (((previousValue != value) 
							|| (this._CategoryTwo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryTwo.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._CategoryTwo.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IdCategoryTwo = value.IdCategoryTwo;
					}
					else
					{
						this._IdCategoryTwo = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryTwo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Product", Storage="_Company", ThisKey="IdCompany", OtherKey="IdCompany", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IdCompany = value.IdCompany;
					}
					else
					{
						this._IdCompany = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CatalogDetails(CatalogDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_CatalogDetails(CatalogDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductsFiles(ProductsFile entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductsFiles(ProductsFile entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductsFiles")]
	public partial class ProductsFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdProductFile;
		
		private System.Nullable<int> _IdProduct;
		
		private System.Nullable<int> _IdFile;
		
		private EntityRef<File> _File;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdProductFileChanging(int value);
    partial void OnIdProductFileChanged();
    partial void OnIdProductChanging(System.Nullable<int> value);
    partial void OnIdProductChanged();
    partial void OnIdFileChanging(System.Nullable<int> value);
    partial void OnIdFileChanged();
    #endregion
		
		public ProductsFile()
		{
			this._File = default(EntityRef<File>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProductFile", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdProductFile
		{
			get
			{
				return this._IdProductFile;
			}
			set
			{
				if ((this._IdProductFile != value))
				{
					this.OnIdProductFileChanging(value);
					this.SendPropertyChanging();
					this._IdProductFile = value;
					this.SendPropertyChanged("IdProductFile");
					this.OnIdProductFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProduct", DbType="Int")]
		public System.Nullable<int> IdProduct
		{
			get
			{
				return this._IdProduct;
			}
			set
			{
				if ((this._IdProduct != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProductChanging(value);
					this.SendPropertyChanging();
					this._IdProduct = value;
					this.SendPropertyChanged("IdProduct");
					this.OnIdProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdFile", DbType="Int")]
		public System.Nullable<int> IdFile
		{
			get
			{
				return this._IdFile;
			}
			set
			{
				if ((this._IdFile != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdFileChanging(value);
					this.SendPropertyChanging();
					this._IdFile = value;
					this.SendPropertyChanged("IdFile");
					this.OnIdFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_ProductsFile", Storage="_File", ThisKey="IdFile", OtherKey="IdFile", IsForeignKey=true)]
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.ProductsFiles.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.ProductsFiles.Add(this);
						this._IdFile = value.IdFile;
					}
					else
					{
						this._IdFile = default(Nullable<int>);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductsFile", Storage="_Product", ThisKey="IdProduct", OtherKey="IdProduct", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductsFiles.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductsFiles.Add(this);
						this._IdProduct = value.IdProduct;
					}
					else
					{
						this._IdProduct = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCatalogs")]
	public partial class UserCatalog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdUserCatalog;
		
		private System.Nullable<int> _IdUser;
		
		private System.Nullable<int> _IdCatalogHeader;
		
		private EntityRef<CatalogHeader> _CatalogHeader;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUserCatalogChanging(int value);
    partial void OnIdUserCatalogChanged();
    partial void OnIdUserChanging(System.Nullable<int> value);
    partial void OnIdUserChanged();
    partial void OnIdCatalogHeaderChanging(System.Nullable<int> value);
    partial void OnIdCatalogHeaderChanged();
    #endregion
		
		public UserCatalog()
		{
			this._CatalogHeader = default(EntityRef<CatalogHeader>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUserCatalog", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdUserCatalog
		{
			get
			{
				return this._IdUserCatalog;
			}
			set
			{
				if ((this._IdUserCatalog != value))
				{
					this.OnIdUserCatalogChanging(value);
					this.SendPropertyChanging();
					this._IdUserCatalog = value;
					this.SendPropertyChanged("IdUserCatalog");
					this.OnIdUserCatalogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="Int")]
		public System.Nullable<int> IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCatalogHeader", DbType="Int")]
		public System.Nullable<int> IdCatalogHeader
		{
			get
			{
				return this._IdCatalogHeader;
			}
			set
			{
				if ((this._IdCatalogHeader != value))
				{
					if (this._CatalogHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCatalogHeaderChanging(value);
					this.SendPropertyChanging();
					this._IdCatalogHeader = value;
					this.SendPropertyChanged("IdCatalogHeader");
					this.OnIdCatalogHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogHeader_UserCatalog", Storage="_CatalogHeader", ThisKey="IdCatalogHeader", OtherKey="IdCatalogHeader", IsForeignKey=true)]
		public CatalogHeader CatalogHeader
		{
			get
			{
				return this._CatalogHeader.Entity;
			}
			set
			{
				CatalogHeader previousValue = this._CatalogHeader.Entity;
				if (((previousValue != value) 
							|| (this._CatalogHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatalogHeader.Entity = null;
						previousValue.UserCatalogs.Remove(this);
					}
					this._CatalogHeader.Entity = value;
					if ((value != null))
					{
						value.UserCatalogs.Add(this);
						this._IdCatalogHeader = value.IdCatalogHeader;
					}
					else
					{
						this._IdCatalogHeader = default(Nullable<int>);
					}
					this.SendPropertyChanged("CatalogHeader");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCatalog", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserCatalogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserCatalogs.Add(this);
						this._IdUser = value.IdUser;
					}
					else
					{
						this._IdUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdUser;
		
		private string _UserName;
		
		private string _Email;
		
		private string _Password;
		
		private System.Nullable<bool> _IsGeneralAdmin;
		
		private System.Nullable<int> _IdCountry;
		
		private System.Nullable<int> _IdCity;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<UserCatalog> _UserCatalogs;
		
		private EntitySet<Device> _Devices;
		
		private EntityRef<City> _City;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUserChanging(int value);
    partial void OnIdUserChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsGeneralAdminChanging(System.Nullable<bool> value);
    partial void OnIsGeneralAdminChanged();
    partial void OnIdCountryChanging(System.Nullable<int> value);
    partial void OnIdCountryChanged();
    partial void OnIdCityChanging(System.Nullable<int> value);
    partial void OnIdCityChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public User()
		{
			this._UserCatalogs = new EntitySet<UserCatalog>(new Action<UserCatalog>(this.attach_UserCatalogs), new Action<UserCatalog>(this.detach_UserCatalogs));
			this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
			this._City = default(EntityRef<City>);
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsGeneralAdmin", DbType="Bit")]
		public System.Nullable<bool> IsGeneralAdmin
		{
			get
			{
				return this._IsGeneralAdmin;
			}
			set
			{
				if ((this._IsGeneralAdmin != value))
				{
					this.OnIsGeneralAdminChanging(value);
					this.SendPropertyChanging();
					this._IsGeneralAdmin = value;
					this.SendPropertyChanged("IsGeneralAdmin");
					this.OnIsGeneralAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCountry", DbType="Int")]
		public System.Nullable<int> IdCountry
		{
			get
			{
				return this._IdCountry;
			}
			set
			{
				if ((this._IdCountry != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCountryChanging(value);
					this.SendPropertyChanging();
					this._IdCountry = value;
					this.SendPropertyChanged("IdCountry");
					this.OnIdCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCity", DbType="Int")]
		public System.Nullable<int> IdCity
		{
			get
			{
				return this._IdCity;
			}
			set
			{
				if ((this._IdCity != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCityChanging(value);
					this.SendPropertyChanging();
					this._IdCity = value;
					this.SendPropertyChanged("IdCity");
					this.OnIdCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="nvarchar(50)", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="nvarchar(50)", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCatalog", Storage="_UserCatalogs", ThisKey="IdUser", OtherKey="IdUser")]
		public EntitySet<UserCatalog> UserCatalogs
		{
			get
			{
				return this._UserCatalogs;
			}
			set
			{
				this._UserCatalogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device", Storage="_Devices", ThisKey="IdUser", OtherKey="IdUser")]
		public EntitySet<Device> Devices
		{
			get
			{
				return this._Devices;
			}
			set
			{
				this._Devices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_User", Storage="_City", ThisKey="IdCity", OtherKey="IdCity", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._IdCity = value.IdCity;
					}
					else
					{
						this._IdCity = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_User", Storage="_Country", ThisKey="IdCountry", OtherKey="IdCountry", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._IdCountry = value.IdCountry;
					}
					else
					{
						this._IdCountry = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCatalogs(UserCatalog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserCatalogs(UserCatalog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visibility")]
	public partial class Visibility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdVisibility;
		
		private string _VisibilityName;
		
		private string _VisibilityDescription;
		
		private System.Nullable<decimal> _PercentOfVisibilityPages;
		
		private System.Nullable<int> _IdCompany;
		
		private EntitySet<CatalogHeader> _CatalogHeaders;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdVisibilityChanging(int value);
    partial void OnIdVisibilityChanged();
    partial void OnVisibilityNameChanging(string value);
    partial void OnVisibilityNameChanged();
    partial void OnVisibilityDescriptionChanging(string value);
    partial void OnVisibilityDescriptionChanged();
    partial void OnPercentOfVisibilityPagesChanging(System.Nullable<decimal> value);
    partial void OnPercentOfVisibilityPagesChanged();
    partial void OnIdCompanyChanging(System.Nullable<int> value);
    partial void OnIdCompanyChanged();
    #endregion
		
		public Visibility()
		{
			this._CatalogHeaders = new EntitySet<CatalogHeader>(new Action<CatalogHeader>(this.attach_CatalogHeaders), new Action<CatalogHeader>(this.detach_CatalogHeaders));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdVisibility", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdVisibility
		{
			get
			{
				return this._IdVisibility;
			}
			set
			{
				if ((this._IdVisibility != value))
				{
					this.OnIdVisibilityChanging(value);
					this.SendPropertyChanging();
					this._IdVisibility = value;
					this.SendPropertyChanged("IdVisibility");
					this.OnIdVisibilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisibilityName", DbType="NVarChar(50)")]
		public string VisibilityName
		{
			get
			{
				return this._VisibilityName;
			}
			set
			{
				if ((this._VisibilityName != value))
				{
					this.OnVisibilityNameChanging(value);
					this.SendPropertyChanging();
					this._VisibilityName = value;
					this.SendPropertyChanged("VisibilityName");
					this.OnVisibilityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisibilityDescription", DbType="NVarChar(200)")]
		public string VisibilityDescription
		{
			get
			{
				return this._VisibilityDescription;
			}
			set
			{
				if ((this._VisibilityDescription != value))
				{
					this.OnVisibilityDescriptionChanging(value);
					this.SendPropertyChanging();
					this._VisibilityDescription = value;
					this.SendPropertyChanged("VisibilityDescription");
					this.OnVisibilityDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentOfVisibilityPages", DbType="Money")]
		public System.Nullable<decimal> PercentOfVisibilityPages
		{
			get
			{
				return this._PercentOfVisibilityPages;
			}
			set
			{
				if ((this._PercentOfVisibilityPages != value))
				{
					this.OnPercentOfVisibilityPagesChanging(value);
					this.SendPropertyChanging();
					this._PercentOfVisibilityPages = value;
					this.SendPropertyChanged("PercentOfVisibilityPages");
					this.OnPercentOfVisibilityPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCompany", DbType="Int")]
		public System.Nullable<int> IdCompany
		{
			get
			{
				return this._IdCompany;
			}
			set
			{
				if ((this._IdCompany != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCompanyChanging(value);
					this.SendPropertyChanging();
					this._IdCompany = value;
					this.SendPropertyChanged("IdCompany");
					this.OnIdCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visibility_CatalogHeader", Storage="_CatalogHeaders", ThisKey="IdVisibility", OtherKey="IdVisibility")]
		public EntitySet<CatalogHeader> CatalogHeaders
		{
			get
			{
				return this._CatalogHeaders;
			}
			set
			{
				this._CatalogHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Visibility", Storage="_Company", ThisKey="IdCompany", OtherKey="IdCompany", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Visibilities.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Visibilities.Add(this);
						this._IdCompany = value.IdCompany;
					}
					else
					{
						this._IdCompany = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CatalogHeaders(CatalogHeader entity)
		{
			this.SendPropertyChanging();
			entity.Visibility = this;
		}
		
		private void detach_CatalogHeaders(CatalogHeader entity)
		{
			this.SendPropertyChanging();
			entity.Visibility = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Devices")]
	public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdDevice;
		
		private string _DeviceCode;
		
		private string _DeviceDescription;
		
		private System.Nullable<int> _IdUser;
		
		private System.Nullable<System.DateTime> _LastSync;
		
		private System.Nullable<bool> _IsAssociated;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDeviceChanging(int value);
    partial void OnIdDeviceChanged();
    partial void OnDeviceCodeChanging(string value);
    partial void OnDeviceCodeChanged();
    partial void OnDeviceDescriptionChanging(string value);
    partial void OnDeviceDescriptionChanged();
    partial void OnIdUserChanging(System.Nullable<int> value);
    partial void OnIdUserChanged();
    partial void OnLastSyncChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSyncChanged();
    partial void OnIsAssociatedChanging(System.Nullable<bool> value);
    partial void OnIsAssociatedChanged();
    #endregion
		
		public Device()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDevice", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdDevice
		{
			get
			{
				return this._IdDevice;
			}
			set
			{
				if ((this._IdDevice != value))
				{
					this.OnIdDeviceChanging(value);
					this.SendPropertyChanging();
					this._IdDevice = value;
					this.SendPropertyChanged("IdDevice");
					this.OnIdDeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceCode", DbType="NVarChar(20)")]
		public string DeviceCode
		{
			get
			{
				return this._DeviceCode;
			}
			set
			{
				if ((this._DeviceCode != value))
				{
					this.OnDeviceCodeChanging(value);
					this.SendPropertyChanging();
					this._DeviceCode = value;
					this.SendPropertyChanged("DeviceCode");
					this.OnDeviceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceDescription", DbType="NVarChar(50)")]
		public string DeviceDescription
		{
			get
			{
				return this._DeviceDescription;
			}
			set
			{
				if ((this._DeviceDescription != value))
				{
					this.OnDeviceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._DeviceDescription = value;
					this.SendPropertyChanged("DeviceDescription");
					this.OnDeviceDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="Int")]
		public System.Nullable<int> IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSync", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastSync
		{
			get
			{
				return this._LastSync;
			}
			set
			{
				if ((this._LastSync != value))
				{
					this.OnLastSyncChanging(value);
					this.SendPropertyChanging();
					this._LastSync = value;
					this.SendPropertyChanged("LastSync");
					this.OnLastSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAssociated", DbType="Bit")]
		public System.Nullable<bool> IsAssociated
		{
			get
			{
				return this._IsAssociated;
			}
			set
			{
				if ((this._IsAssociated != value))
				{
					this.OnIsAssociatedChanging(value);
					this.SendPropertyChanging();
					this._IsAssociated = value;
					this.SendPropertyChanged("IsAssociated");
					this.OnIsAssociatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Devices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Devices.Add(this);
						this._IdUser = value.IdUser;
					}
					else
					{
						this._IdUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
