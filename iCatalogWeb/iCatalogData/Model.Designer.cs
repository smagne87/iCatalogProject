//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "CatalogHeader_CatalogDetail", "CatalogHeader", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.CatalogHeader), "CatalogDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.CatalogDetail))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Product_CatalogDetail", "Products", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Products), "CatalogDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.CatalogDetail))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "CatalogHeader_UserCatalog", "CatalogHeader", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.CatalogHeader), "UserCatalogs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.UserCatalogs))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Company_CatalogHeader", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Companies), "CatalogHeader", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.CatalogHeader))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Visibility_CatalogHeader", "Visibility", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Visibility), "CatalogHeader", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.CatalogHeader))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "City_Company", "Cities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Cities), "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Companies))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "City_User", "Cities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Cities), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Users))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Country_City", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Countries), "Cities", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Cities))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Company_File", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Companies), "Files", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Files))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Company_Product", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Companies), "Products", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Products))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Company_Visibility", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Companies), "Visibility", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Visibility))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Country_Company", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Countries), "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Companies))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Country_User", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Countries), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Users))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "User_Device", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Users), "Devices", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Devices))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "File_ProductsFile", "Files", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Files), "ProductsFiles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.ProductsFiles))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Product_ProductsFile", "Products", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Products), "ProductsFiles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.ProductsFiles))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "User_UserCatalog", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Users), "UserCatalogs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.UserCatalogs))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "CategoryOne_Product1", "Category", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Category), "Products", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Products))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "Company_CategoryOne1", "Companies", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Companies), "Category", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.Category))]
[assembly: EdmRelationshipAttribute("iCatalogDatabaseModel", "FK_CategoryItem_Category", "Category", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(iCatalogData.Category), "CategoryItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(iCatalogData.CategoryItem))]

#endregion

namespace iCatalogData
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class iCatalogDatabaseEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new iCatalogDatabaseEntities object using the connection string found in the 'iCatalogDatabaseEntities' section of the application configuration file.
        /// </summary>
        public iCatalogDatabaseEntities() : base("name=iCatalogDatabaseEntities", "iCatalogDatabaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new iCatalogDatabaseEntities object.
        /// </summary>
        public iCatalogDatabaseEntities(string connectionString) : base(connectionString, "iCatalogDatabaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new iCatalogDatabaseEntities object.
        /// </summary>
        public iCatalogDatabaseEntities(EntityConnection connection) : base(connection, "iCatalogDatabaseEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CatalogDetail> CatalogDetail
        {
            get
            {
                if ((_CatalogDetail == null))
                {
                    _CatalogDetail = base.CreateObjectSet<CatalogDetail>("CatalogDetail");
                }
                return _CatalogDetail;
            }
        }
        private ObjectSet<CatalogDetail> _CatalogDetail;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CatalogHeader> CatalogHeader
        {
            get
            {
                if ((_CatalogHeader == null))
                {
                    _CatalogHeader = base.CreateObjectSet<CatalogHeader>("CatalogHeader");
                }
                return _CatalogHeader;
            }
        }
        private ObjectSet<CatalogHeader> _CatalogHeader;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Cities> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<Cities>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<Cities> _Cities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Companies> Companies
        {
            get
            {
                if ((_Companies == null))
                {
                    _Companies = base.CreateObjectSet<Companies>("Companies");
                }
                return _Companies;
            }
        }
        private ObjectSet<Companies> _Companies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Countries> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Countries>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Countries> _Countries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Devices> Devices
        {
            get
            {
                if ((_Devices == null))
                {
                    _Devices = base.CreateObjectSet<Devices>("Devices");
                }
                return _Devices;
            }
        }
        private ObjectSet<Devices> _Devices;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Files> Files
        {
            get
            {
                if ((_Files == null))
                {
                    _Files = base.CreateObjectSet<Files>("Files");
                }
                return _Files;
            }
        }
        private ObjectSet<Files> _Files;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Products> Products
        {
            get
            {
                if ((_Products == null))
                {
                    _Products = base.CreateObjectSet<Products>("Products");
                }
                return _Products;
            }
        }
        private ObjectSet<Products> _Products;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ProductsFiles> ProductsFiles
        {
            get
            {
                if ((_ProductsFiles == null))
                {
                    _ProductsFiles = base.CreateObjectSet<ProductsFiles>("ProductsFiles");
                }
                return _ProductsFiles;
            }
        }
        private ObjectSet<ProductsFiles> _ProductsFiles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserCatalogs> UserCatalogs
        {
            get
            {
                if ((_UserCatalogs == null))
                {
                    _UserCatalogs = base.CreateObjectSet<UserCatalogs>("UserCatalogs");
                }
                return _UserCatalogs;
            }
        }
        private ObjectSet<UserCatalogs> _UserCatalogs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Users> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<Users>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<Users> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Visibility> Visibility
        {
            get
            {
                if ((_Visibility == null))
                {
                    _Visibility = base.CreateObjectSet<Visibility>("Visibility");
                }
                return _Visibility;
            }
        }
        private ObjectSet<Visibility> _Visibility;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Category> Category
        {
            get
            {
                if ((_Category == null))
                {
                    _Category = base.CreateObjectSet<Category>("Category");
                }
                return _Category;
            }
        }
        private ObjectSet<Category> _Category;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CategoryItem> CategoryItem
        {
            get
            {
                if ((_CategoryItem == null))
                {
                    _CategoryItem = base.CreateObjectSet<CategoryItem>("CategoryItem");
                }
                return _CategoryItem;
            }
        }
        private ObjectSet<CategoryItem> _CategoryItem;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CatalogDetail EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCatalogDetail(CatalogDetail catalogDetail)
        {
            base.AddObject("CatalogDetail", catalogDetail);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CatalogHeader EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCatalogHeader(CatalogHeader catalogHeader)
        {
            base.AddObject("CatalogHeader", catalogHeader);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(Cities cities)
        {
            base.AddObject("Cities", cities);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Companies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanies(Companies companies)
        {
            base.AddObject("Companies", companies);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountries(Countries countries)
        {
            base.AddObject("Countries", countries);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Devices EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDevices(Devices devices)
        {
            base.AddObject("Devices", devices);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Files EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFiles(Files files)
        {
            base.AddObject("Files", files);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Products EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProducts(Products products)
        {
            base.AddObject("Products", products);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ProductsFiles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProductsFiles(ProductsFiles productsFiles)
        {
            base.AddObject("ProductsFiles", productsFiles);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserCatalogs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserCatalogs(UserCatalogs userCatalogs)
        {
            base.AddObject("UserCatalogs", userCatalogs);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(Users users)
        {
            base.AddObject("Users", users);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Visibility EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVisibility(Visibility visibility)
        {
            base.AddObject("Visibility", visibility);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Category EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCategory(Category category)
        {
            base.AddObject("Category", category);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CategoryItem EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCategoryItem(CategoryItem categoryItem)
        {
            base.AddObject("CategoryItem", categoryItem);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="CatalogDetail")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CatalogDetail : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CatalogDetail object.
        /// </summary>
        /// <param name="idCatalogDetail">Initial value of the IdCatalogDetail property.</param>
        public static CatalogDetail CreateCatalogDetail(global::System.Int32 idCatalogDetail)
        {
            CatalogDetail catalogDetail = new CatalogDetail();
            catalogDetail.IdCatalogDetail = idCatalogDetail;
            return catalogDetail;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdCatalogDetail
        {
            get
            {
                return _IdCatalogDetail;
            }
            set
            {
                if (_IdCatalogDetail != value)
                {
                    OnIdCatalogDetailChanging(value);
                    ReportPropertyChanging("IdCatalogDetail");
                    _IdCatalogDetail = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdCatalogDetail");
                    OnIdCatalogDetailChanged();
                }
            }
        }
        private global::System.Int32 _IdCatalogDetail;
        partial void OnIdCatalogDetailChanging(global::System.Int32 value);
        partial void OnIdCatalogDetailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PageOrder
        {
            get
            {
                return _PageOrder;
            }
            set
            {
                OnPageOrderChanging(value);
                ReportPropertyChanging("PageOrder");
                _PageOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PageOrder");
                OnPageOrderChanged();
            }
        }
        private Nullable<global::System.Int32> _PageOrder;
        partial void OnPageOrderChanging(Nullable<global::System.Int32> value);
        partial void OnPageOrderChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "CatalogHeader_CatalogDetail", "CatalogHeader")]
        public CatalogHeader CatalogHeader
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CatalogHeader>("iCatalogDatabaseModel.CatalogHeader_CatalogDetail", "CatalogHeader").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CatalogHeader>("iCatalogDatabaseModel.CatalogHeader_CatalogDetail", "CatalogHeader").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CatalogHeader> CatalogHeaderReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CatalogHeader>("iCatalogDatabaseModel.CatalogHeader_CatalogDetail", "CatalogHeader");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CatalogHeader>("iCatalogDatabaseModel.CatalogHeader_CatalogDetail", "CatalogHeader", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Product_CatalogDetail", "Products")]
        public Products Products
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Products>("iCatalogDatabaseModel.Product_CatalogDetail", "Products").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Products>("iCatalogDatabaseModel.Product_CatalogDetail", "Products").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Products> ProductsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Products>("iCatalogDatabaseModel.Product_CatalogDetail", "Products");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Products>("iCatalogDatabaseModel.Product_CatalogDetail", "Products", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="CatalogHeader")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CatalogHeader : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CatalogHeader object.
        /// </summary>
        /// <param name="idCatalogHeader">Initial value of the IdCatalogHeader property.</param>
        public static CatalogHeader CreateCatalogHeader(global::System.Int32 idCatalogHeader)
        {
            CatalogHeader catalogHeader = new CatalogHeader();
            catalogHeader.IdCatalogHeader = idCatalogHeader;
            return catalogHeader;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdCatalogHeader
        {
            get
            {
                return _IdCatalogHeader;
            }
            set
            {
                if (_IdCatalogHeader != value)
                {
                    OnIdCatalogHeaderChanging(value);
                    ReportPropertyChanging("IdCatalogHeader");
                    _IdCatalogHeader = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdCatalogHeader");
                    OnIdCatalogHeaderChanged();
                }
            }
        }
        private global::System.Int32 _IdCatalogHeader;
        partial void OnIdCatalogHeaderChanging(global::System.Int32 value);
        partial void OnIdCatalogHeaderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CatalogCode
        {
            get
            {
                return _CatalogCode;
            }
            set
            {
                OnCatalogCodeChanging(value);
                ReportPropertyChanging("CatalogCode");
                _CatalogCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CatalogCode");
                OnCatalogCodeChanged();
            }
        }
        private global::System.String _CatalogCode;
        partial void OnCatalogCodeChanging(global::System.String value);
        partial void OnCatalogCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CatalogDescription
        {
            get
            {
                return _CatalogDescription;
            }
            set
            {
                OnCatalogDescriptionChanging(value);
                ReportPropertyChanging("CatalogDescription");
                _CatalogDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CatalogDescription");
                OnCatalogDescriptionChanged();
            }
        }
        private global::System.String _CatalogDescription;
        partial void OnCatalogDescriptionChanging(global::System.String value);
        partial void OnCatalogDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateTo
        {
            get
            {
                return _DateTo;
            }
            set
            {
                OnDateToChanging(value);
                ReportPropertyChanging("DateTo");
                _DateTo = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateTo");
                OnDateToChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateTo;
        partial void OnDateToChanging(Nullable<global::System.DateTime> value);
        partial void OnDateToChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateFrom
        {
            get
            {
                return _DateFrom;
            }
            set
            {
                OnDateFromChanging(value);
                ReportPropertyChanging("DateFrom");
                _DateFrom = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateFrom");
                OnDateFromChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateFrom;
        partial void OnDateFromChanging(Nullable<global::System.DateTime> value);
        partial void OnDateFromChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Pages
        {
            get
            {
                return _Pages;
            }
            set
            {
                OnPagesChanging(value);
                ReportPropertyChanging("Pages");
                _Pages = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Pages");
                OnPagesChanged();
            }
        }
        private Nullable<global::System.Int32> _Pages;
        partial void OnPagesChanging(Nullable<global::System.Int32> value);
        partial void OnPagesChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "CatalogHeader_CatalogDetail", "CatalogDetail")]
        public EntityCollection<CatalogDetail> CatalogDetail
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CatalogDetail>("iCatalogDatabaseModel.CatalogHeader_CatalogDetail", "CatalogDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CatalogDetail>("iCatalogDatabaseModel.CatalogHeader_CatalogDetail", "CatalogDetail", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "CatalogHeader_UserCatalog", "UserCatalogs")]
        public EntityCollection<UserCatalogs> UserCatalogs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserCatalogs>("iCatalogDatabaseModel.CatalogHeader_UserCatalog", "UserCatalogs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserCatalogs>("iCatalogDatabaseModel.CatalogHeader_UserCatalog", "UserCatalogs", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Company_CatalogHeader", "Companies")]
        public Companies Companies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_CatalogHeader", "Companies").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_CatalogHeader", "Companies").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Companies> CompaniesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_CatalogHeader", "Companies");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Companies>("iCatalogDatabaseModel.Company_CatalogHeader", "Companies", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Visibility_CatalogHeader", "Visibility")]
        public Visibility Visibility
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Visibility>("iCatalogDatabaseModel.Visibility_CatalogHeader", "Visibility").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Visibility>("iCatalogDatabaseModel.Visibility_CatalogHeader", "Visibility").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Visibility> VisibilityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Visibility>("iCatalogDatabaseModel.Visibility_CatalogHeader", "Visibility");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Visibility>("iCatalogDatabaseModel.Visibility_CatalogHeader", "Visibility", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="Category")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Category : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Category object.
        /// </summary>
        /// <param name="idCategory">Initial value of the IdCategory property.</param>
        public static Category CreateCategory(global::System.Int32 idCategory)
        {
            Category category = new Category();
            category.IdCategory = idCategory;
            return category;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdCategory
        {
            get
            {
                return _IdCategory;
            }
            set
            {
                if (_IdCategory != value)
                {
                    OnIdCategoryChanging(value);
                    ReportPropertyChanging("IdCategory");
                    _IdCategory = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdCategory");
                    OnIdCategoryChanged();
                }
            }
        }
        private global::System.Int32 _IdCategory;
        partial void OnIdCategoryChanging(global::System.Int32 value);
        partial void OnIdCategoryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
                OnCategoryNameChanging(value);
                ReportPropertyChanging("CategoryName");
                _CategoryName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CategoryName");
                OnCategoryNameChanged();
            }
        }
        private global::System.String _CategoryName;
        partial void OnCategoryNameChanging(global::System.String value);
        partial void OnCategoryNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CategoryDescription
        {
            get
            {
                return _CategoryDescription;
            }
            set
            {
                OnCategoryDescriptionChanging(value);
                ReportPropertyChanging("CategoryDescription");
                _CategoryDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CategoryDescription");
                OnCategoryDescriptionChanged();
            }
        }
        private global::System.String _CategoryDescription;
        partial void OnCategoryDescriptionChanging(global::System.String value);
        partial void OnCategoryDescriptionChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "CategoryOne_Product1", "Products")]
        public EntityCollection<Products> Products
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Products>("iCatalogDatabaseModel.CategoryOne_Product1", "Products");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Products>("iCatalogDatabaseModel.CategoryOne_Product1", "Products", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Company_CategoryOne1", "Companies")]
        public Companies Companies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_CategoryOne1", "Companies").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_CategoryOne1", "Companies").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Companies> CompaniesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_CategoryOne1", "Companies");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Companies>("iCatalogDatabaseModel.Company_CategoryOne1", "Companies", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "FK_CategoryItem_Category", "CategoryItem")]
        public EntityCollection<CategoryItem> CategoryItem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CategoryItem>("iCatalogDatabaseModel.FK_CategoryItem_Category", "CategoryItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CategoryItem>("iCatalogDatabaseModel.FK_CategoryItem_Category", "CategoryItem", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="CategoryItem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CategoryItem : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CategoryItem object.
        /// </summary>
        /// <param name="idCategoryItem">Initial value of the IdCategoryItem property.</param>
        public static CategoryItem CreateCategoryItem(global::System.Int32 idCategoryItem)
        {
            CategoryItem categoryItem = new CategoryItem();
            categoryItem.IdCategoryItem = idCategoryItem;
            return categoryItem;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdCategoryItem
        {
            get
            {
                return _IdCategoryItem;
            }
            set
            {
                if (_IdCategoryItem != value)
                {
                    OnIdCategoryItemChanging(value);
                    ReportPropertyChanging("IdCategoryItem");
                    _IdCategoryItem = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdCategoryItem");
                    OnIdCategoryItemChanged();
                }
            }
        }
        private global::System.Int32 _IdCategoryItem;
        partial void OnIdCategoryItemChanging(global::System.Int32 value);
        partial void OnIdCategoryItemChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CategoryItemName
        {
            get
            {
                return _CategoryItemName;
            }
            set
            {
                OnCategoryItemNameChanging(value);
                ReportPropertyChanging("CategoryItemName");
                _CategoryItemName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CategoryItemName");
                OnCategoryItemNameChanged();
            }
        }
        private global::System.String _CategoryItemName;
        partial void OnCategoryItemNameChanging(global::System.String value);
        partial void OnCategoryItemNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "FK_CategoryItem_Category", "Category")]
        public Category Category
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Category>("iCatalogDatabaseModel.FK_CategoryItem_Category", "Category").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Category>("iCatalogDatabaseModel.FK_CategoryItem_Category", "Category").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Category> CategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Category>("iCatalogDatabaseModel.FK_CategoryItem_Category", "Category");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Category>("iCatalogDatabaseModel.FK_CategoryItem_Category", "Category", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="Cities")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Cities : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Cities object.
        /// </summary>
        /// <param name="idCity">Initial value of the IdCity property.</param>
        public static Cities CreateCities(global::System.Int32 idCity)
        {
            Cities cities = new Cities();
            cities.IdCity = idCity;
            return cities;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdCity
        {
            get
            {
                return _IdCity;
            }
            set
            {
                if (_IdCity != value)
                {
                    OnIdCityChanging(value);
                    ReportPropertyChanging("IdCity");
                    _IdCity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdCity");
                    OnIdCityChanged();
                }
            }
        }
        private global::System.Int32 _IdCity;
        partial void OnIdCityChanging(global::System.Int32 value);
        partial void OnIdCityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CityName
        {
            get
            {
                return _CityName;
            }
            set
            {
                OnCityNameChanging(value);
                ReportPropertyChanging("CityName");
                _CityName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CityName");
                OnCityNameChanged();
            }
        }
        private global::System.String _CityName;
        partial void OnCityNameChanging(global::System.String value);
        partial void OnCityNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "City_Company", "Companies")]
        public EntityCollection<Companies> Companies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Companies>("iCatalogDatabaseModel.City_Company", "Companies");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Companies>("iCatalogDatabaseModel.City_Company", "Companies", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "City_User", "Users")]
        public EntityCollection<Users> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Users>("iCatalogDatabaseModel.City_User", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Users>("iCatalogDatabaseModel.City_User", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Country_City", "Countries")]
        public Countries Countries
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Countries>("iCatalogDatabaseModel.Country_City", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Countries>("iCatalogDatabaseModel.Country_City", "Countries").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Countries> CountriesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Countries>("iCatalogDatabaseModel.Country_City", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Countries>("iCatalogDatabaseModel.Country_City", "Countries", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="Companies")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Companies : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Companies object.
        /// </summary>
        /// <param name="idCompany">Initial value of the IdCompany property.</param>
        public static Companies CreateCompanies(global::System.Int32 idCompany)
        {
            Companies companies = new Companies();
            companies.IdCompany = idCompany;
            return companies;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdCompany
        {
            get
            {
                return _IdCompany;
            }
            set
            {
                if (_IdCompany != value)
                {
                    OnIdCompanyChanging(value);
                    ReportPropertyChanging("IdCompany");
                    _IdCompany = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdCompany");
                    OnIdCompanyChanged();
                }
            }
        }
        private global::System.Int32 _IdCompany;
        partial void OnIdCompanyChanging(global::System.Int32 value);
        partial void OnIdCompanyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CompanyName
        {
            get
            {
                return _CompanyName;
            }
            set
            {
                OnCompanyNameChanging(value);
                ReportPropertyChanging("CompanyName");
                _CompanyName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CompanyName");
                OnCompanyNameChanged();
            }
        }
        private global::System.String _CompanyName;
        partial void OnCompanyNameChanging(global::System.String value);
        partial void OnCompanyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WebUrl
        {
            get
            {
                return _WebUrl;
            }
            set
            {
                OnWebUrlChanging(value);
                ReportPropertyChanging("WebUrl");
                _WebUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WebUrl");
                OnWebUrlChanged();
            }
        }
        private global::System.String _WebUrl;
        partial void OnWebUrlChanging(global::System.String value);
        partial void OnWebUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CompanyUserName
        {
            get
            {
                return _CompanyUserName;
            }
            set
            {
                OnCompanyUserNameChanging(value);
                ReportPropertyChanging("CompanyUserName");
                _CompanyUserName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CompanyUserName");
                OnCompanyUserNameChanged();
            }
        }
        private global::System.String _CompanyUserName;
        partial void OnCompanyUserNameChanging(global::System.String value);
        partial void OnCompanyUserNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Company_CatalogHeader", "CatalogHeader")]
        public EntityCollection<CatalogHeader> CatalogHeader
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CatalogHeader>("iCatalogDatabaseModel.Company_CatalogHeader", "CatalogHeader");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CatalogHeader>("iCatalogDatabaseModel.Company_CatalogHeader", "CatalogHeader", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "City_Company", "Cities")]
        public Cities Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cities>("iCatalogDatabaseModel.City_Company", "Cities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cities>("iCatalogDatabaseModel.City_Company", "Cities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Cities> CitiesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cities>("iCatalogDatabaseModel.City_Company", "Cities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Cities>("iCatalogDatabaseModel.City_Company", "Cities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Company_File", "Files")]
        public EntityCollection<Files> Files
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Files>("iCatalogDatabaseModel.Company_File", "Files");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Files>("iCatalogDatabaseModel.Company_File", "Files", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Company_Product", "Products")]
        public EntityCollection<Products> Products
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Products>("iCatalogDatabaseModel.Company_Product", "Products");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Products>("iCatalogDatabaseModel.Company_Product", "Products", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Company_Visibility", "Visibility")]
        public EntityCollection<Visibility> Visibility
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Visibility>("iCatalogDatabaseModel.Company_Visibility", "Visibility");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Visibility>("iCatalogDatabaseModel.Company_Visibility", "Visibility", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Country_Company", "Countries")]
        public Countries Countries
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Countries>("iCatalogDatabaseModel.Country_Company", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Countries>("iCatalogDatabaseModel.Country_Company", "Countries").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Countries> CountriesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Countries>("iCatalogDatabaseModel.Country_Company", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Countries>("iCatalogDatabaseModel.Country_Company", "Countries", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Company_CategoryOne1", "Category")]
        public EntityCollection<Category> Category
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Category>("iCatalogDatabaseModel.Company_CategoryOne1", "Category");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Category>("iCatalogDatabaseModel.Company_CategoryOne1", "Category", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="Countries")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Countries : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Countries object.
        /// </summary>
        /// <param name="idCountry">Initial value of the IdCountry property.</param>
        public static Countries CreateCountries(global::System.Int32 idCountry)
        {
            Countries countries = new Countries();
            countries.IdCountry = idCountry;
            return countries;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdCountry
        {
            get
            {
                return _IdCountry;
            }
            set
            {
                if (_IdCountry != value)
                {
                    OnIdCountryChanging(value);
                    ReportPropertyChanging("IdCountry");
                    _IdCountry = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdCountry");
                    OnIdCountryChanged();
                }
            }
        }
        private global::System.Int32 _IdCountry;
        partial void OnIdCountryChanging(global::System.Int32 value);
        partial void OnIdCountryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CountryName
        {
            get
            {
                return _CountryName;
            }
            set
            {
                OnCountryNameChanging(value);
                ReportPropertyChanging("CountryName");
                _CountryName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CountryName");
                OnCountryNameChanged();
            }
        }
        private global::System.String _CountryName;
        partial void OnCountryNameChanging(global::System.String value);
        partial void OnCountryNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Country_City", "Cities")]
        public EntityCollection<Cities> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Cities>("iCatalogDatabaseModel.Country_City", "Cities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Cities>("iCatalogDatabaseModel.Country_City", "Cities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Country_Company", "Companies")]
        public EntityCollection<Companies> Companies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Companies>("iCatalogDatabaseModel.Country_Company", "Companies");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Companies>("iCatalogDatabaseModel.Country_Company", "Companies", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Country_User", "Users")]
        public EntityCollection<Users> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Users>("iCatalogDatabaseModel.Country_User", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Users>("iCatalogDatabaseModel.Country_User", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="Devices")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Devices : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Devices object.
        /// </summary>
        /// <param name="idDevice">Initial value of the IdDevice property.</param>
        public static Devices CreateDevices(global::System.Int32 idDevice)
        {
            Devices devices = new Devices();
            devices.IdDevice = idDevice;
            return devices;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdDevice
        {
            get
            {
                return _IdDevice;
            }
            set
            {
                if (_IdDevice != value)
                {
                    OnIdDeviceChanging(value);
                    ReportPropertyChanging("IdDevice");
                    _IdDevice = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdDevice");
                    OnIdDeviceChanged();
                }
            }
        }
        private global::System.Int32 _IdDevice;
        partial void OnIdDeviceChanging(global::System.Int32 value);
        partial void OnIdDeviceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceCode
        {
            get
            {
                return _DeviceCode;
            }
            set
            {
                OnDeviceCodeChanging(value);
                ReportPropertyChanging("DeviceCode");
                _DeviceCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceCode");
                OnDeviceCodeChanged();
            }
        }
        private global::System.String _DeviceCode;
        partial void OnDeviceCodeChanging(global::System.String value);
        partial void OnDeviceCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeviceDescription
        {
            get
            {
                return _DeviceDescription;
            }
            set
            {
                OnDeviceDescriptionChanging(value);
                ReportPropertyChanging("DeviceDescription");
                _DeviceDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeviceDescription");
                OnDeviceDescriptionChanged();
            }
        }
        private global::System.String _DeviceDescription;
        partial void OnDeviceDescriptionChanging(global::System.String value);
        partial void OnDeviceDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> LastSync
        {
            get
            {
                return _LastSync;
            }
            set
            {
                OnLastSyncChanging(value);
                ReportPropertyChanging("LastSync");
                _LastSync = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastSync");
                OnLastSyncChanged();
            }
        }
        private Nullable<global::System.DateTime> _LastSync;
        partial void OnLastSyncChanging(Nullable<global::System.DateTime> value);
        partial void OnLastSyncChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsAssociated
        {
            get
            {
                return _IsAssociated;
            }
            set
            {
                OnIsAssociatedChanging(value);
                ReportPropertyChanging("IsAssociated");
                _IsAssociated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAssociated");
                OnIsAssociatedChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsAssociated;
        partial void OnIsAssociatedChanging(Nullable<global::System.Boolean> value);
        partial void OnIsAssociatedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "User_Device", "Users")]
        public Users Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("iCatalogDatabaseModel.User_Device", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("iCatalogDatabaseModel.User_Device", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Users> UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("iCatalogDatabaseModel.User_Device", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Users>("iCatalogDatabaseModel.User_Device", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="Files")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Files : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Files object.
        /// </summary>
        /// <param name="idFile">Initial value of the IdFile property.</param>
        public static Files CreateFiles(global::System.Int32 idFile)
        {
            Files files = new Files();
            files.IdFile = idFile;
            return files;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdFile
        {
            get
            {
                return _IdFile;
            }
            set
            {
                if (_IdFile != value)
                {
                    OnIdFileChanging(value);
                    ReportPropertyChanging("IdFile");
                    _IdFile = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdFile");
                    OnIdFileChanged();
                }
            }
        }
        private global::System.Int32 _IdFile;
        partial void OnIdFileChanging(global::System.Int32 value);
        partial void OnIdFileChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FileName
        {
            get
            {
                return _FileName;
            }
            set
            {
                OnFileNameChanging(value);
                ReportPropertyChanging("FileName");
                _FileName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FileName");
                OnFileNameChanged();
            }
        }
        private global::System.String _FileName;
        partial void OnFileNameChanging(global::System.String value);
        partial void OnFileNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FileDescription
        {
            get
            {
                return _FileDescription;
            }
            set
            {
                OnFileDescriptionChanging(value);
                ReportPropertyChanging("FileDescription");
                _FileDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FileDescription");
                OnFileDescriptionChanged();
            }
        }
        private global::System.String _FileDescription;
        partial void OnFileDescriptionChanging(global::System.String value);
        partial void OnFileDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] File
        {
            get
            {
                return StructuralObject.GetValidValue(_File);
            }
            set
            {
                OnFileChanging(value);
                ReportPropertyChanging("File");
                _File = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("File");
                OnFileChanged();
            }
        }
        private global::System.Byte[] _File;
        partial void OnFileChanging(global::System.Byte[] value);
        partial void OnFileChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Company_File", "Companies")]
        public Companies Companies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_File", "Companies").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_File", "Companies").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Companies> CompaniesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_File", "Companies");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Companies>("iCatalogDatabaseModel.Company_File", "Companies", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "File_ProductsFile", "ProductsFiles")]
        public EntityCollection<ProductsFiles> ProductsFiles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ProductsFiles>("iCatalogDatabaseModel.File_ProductsFile", "ProductsFiles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ProductsFiles>("iCatalogDatabaseModel.File_ProductsFile", "ProductsFiles", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="Products")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Products : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Products object.
        /// </summary>
        /// <param name="idProduct">Initial value of the IdProduct property.</param>
        public static Products CreateProducts(global::System.Int32 idProduct)
        {
            Products products = new Products();
            products.IdProduct = idProduct;
            return products;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdProduct
        {
            get
            {
                return _IdProduct;
            }
            set
            {
                if (_IdProduct != value)
                {
                    OnIdProductChanging(value);
                    ReportPropertyChanging("IdProduct");
                    _IdProduct = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdProduct");
                    OnIdProductChanged();
                }
            }
        }
        private global::System.Int32 _IdProduct;
        partial void OnIdProductChanging(global::System.Int32 value);
        partial void OnIdProductChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ProductName
        {
            get
            {
                return _ProductName;
            }
            set
            {
                OnProductNameChanging(value);
                ReportPropertyChanging("ProductName");
                _ProductName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ProductName");
                OnProductNameChanged();
            }
        }
        private global::System.String _ProductName;
        partial void OnProductNameChanging(global::System.String value);
        partial void OnProductNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ProductDescription
        {
            get
            {
                return _ProductDescription;
            }
            set
            {
                OnProductDescriptionChanging(value);
                ReportPropertyChanging("ProductDescription");
                _ProductDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ProductDescription");
                OnProductDescriptionChanged();
            }
        }
        private global::System.String _ProductDescription;
        partial void OnProductDescriptionChanging(global::System.String value);
        partial void OnProductDescriptionChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Product_CatalogDetail", "CatalogDetail")]
        public EntityCollection<CatalogDetail> CatalogDetail
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CatalogDetail>("iCatalogDatabaseModel.Product_CatalogDetail", "CatalogDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CatalogDetail>("iCatalogDatabaseModel.Product_CatalogDetail", "CatalogDetail", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Company_Product", "Companies")]
        public Companies Companies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_Product", "Companies").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_Product", "Companies").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Companies> CompaniesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_Product", "Companies");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Companies>("iCatalogDatabaseModel.Company_Product", "Companies", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Product_ProductsFile", "ProductsFiles")]
        public EntityCollection<ProductsFiles> ProductsFiles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ProductsFiles>("iCatalogDatabaseModel.Product_ProductsFile", "ProductsFiles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ProductsFiles>("iCatalogDatabaseModel.Product_ProductsFile", "ProductsFiles", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "CategoryOne_Product1", "Category")]
        public Category Category
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Category>("iCatalogDatabaseModel.CategoryOne_Product1", "Category").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Category>("iCatalogDatabaseModel.CategoryOne_Product1", "Category").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Category> CategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Category>("iCatalogDatabaseModel.CategoryOne_Product1", "Category");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Category>("iCatalogDatabaseModel.CategoryOne_Product1", "Category", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="ProductsFiles")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ProductsFiles : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ProductsFiles object.
        /// </summary>
        /// <param name="idProductFile">Initial value of the IdProductFile property.</param>
        public static ProductsFiles CreateProductsFiles(global::System.Int32 idProductFile)
        {
            ProductsFiles productsFiles = new ProductsFiles();
            productsFiles.IdProductFile = idProductFile;
            return productsFiles;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdProductFile
        {
            get
            {
                return _IdProductFile;
            }
            set
            {
                if (_IdProductFile != value)
                {
                    OnIdProductFileChanging(value);
                    ReportPropertyChanging("IdProductFile");
                    _IdProductFile = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdProductFile");
                    OnIdProductFileChanged();
                }
            }
        }
        private global::System.Int32 _IdProductFile;
        partial void OnIdProductFileChanging(global::System.Int32 value);
        partial void OnIdProductFileChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "File_ProductsFile", "Files")]
        public Files Files
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Files>("iCatalogDatabaseModel.File_ProductsFile", "Files").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Files>("iCatalogDatabaseModel.File_ProductsFile", "Files").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Files> FilesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Files>("iCatalogDatabaseModel.File_ProductsFile", "Files");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Files>("iCatalogDatabaseModel.File_ProductsFile", "Files", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Product_ProductsFile", "Products")]
        public Products Products
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Products>("iCatalogDatabaseModel.Product_ProductsFile", "Products").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Products>("iCatalogDatabaseModel.Product_ProductsFile", "Products").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Products> ProductsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Products>("iCatalogDatabaseModel.Product_ProductsFile", "Products");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Products>("iCatalogDatabaseModel.Product_ProductsFile", "Products", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="UserCatalogs")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserCatalogs : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserCatalogs object.
        /// </summary>
        /// <param name="idUserCatalog">Initial value of the IdUserCatalog property.</param>
        public static UserCatalogs CreateUserCatalogs(global::System.Int32 idUserCatalog)
        {
            UserCatalogs userCatalogs = new UserCatalogs();
            userCatalogs.IdUserCatalog = idUserCatalog;
            return userCatalogs;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdUserCatalog
        {
            get
            {
                return _IdUserCatalog;
            }
            set
            {
                if (_IdUserCatalog != value)
                {
                    OnIdUserCatalogChanging(value);
                    ReportPropertyChanging("IdUserCatalog");
                    _IdUserCatalog = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdUserCatalog");
                    OnIdUserCatalogChanged();
                }
            }
        }
        private global::System.Int32 _IdUserCatalog;
        partial void OnIdUserCatalogChanging(global::System.Int32 value);
        partial void OnIdUserCatalogChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "CatalogHeader_UserCatalog", "CatalogHeader")]
        public CatalogHeader CatalogHeader
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CatalogHeader>("iCatalogDatabaseModel.CatalogHeader_UserCatalog", "CatalogHeader").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CatalogHeader>("iCatalogDatabaseModel.CatalogHeader_UserCatalog", "CatalogHeader").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CatalogHeader> CatalogHeaderReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CatalogHeader>("iCatalogDatabaseModel.CatalogHeader_UserCatalog", "CatalogHeader");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CatalogHeader>("iCatalogDatabaseModel.CatalogHeader_UserCatalog", "CatalogHeader", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "User_UserCatalog", "Users")]
        public Users Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("iCatalogDatabaseModel.User_UserCatalog", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("iCatalogDatabaseModel.User_UserCatalog", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Users> UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("iCatalogDatabaseModel.User_UserCatalog", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Users>("iCatalogDatabaseModel.User_UserCatalog", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="Users")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Users : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Users object.
        /// </summary>
        /// <param name="idUser">Initial value of the IdUser property.</param>
        public static Users CreateUsers(global::System.Int32 idUser)
        {
            Users users = new Users();
            users.IdUser = idUser;
            return users;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdUser
        {
            get
            {
                return _IdUser;
            }
            set
            {
                if (_IdUser != value)
                {
                    OnIdUserChanging(value);
                    ReportPropertyChanging("IdUser");
                    _IdUser = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdUser");
                    OnIdUserChanged();
                }
            }
        }
        private global::System.Int32 _IdUser;
        partial void OnIdUserChanging(global::System.Int32 value);
        partial void OnIdUserChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsGeneralAdmin
        {
            get
            {
                return _IsGeneralAdmin;
            }
            set
            {
                OnIsGeneralAdminChanging(value);
                ReportPropertyChanging("IsGeneralAdmin");
                _IsGeneralAdmin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsGeneralAdmin");
                OnIsGeneralAdminChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsGeneralAdmin;
        partial void OnIsGeneralAdminChanging(Nullable<global::System.Boolean> value);
        partial void OnIsGeneralAdminChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "City_User", "Cities")]
        public Cities Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cities>("iCatalogDatabaseModel.City_User", "Cities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cities>("iCatalogDatabaseModel.City_User", "Cities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Cities> CitiesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cities>("iCatalogDatabaseModel.City_User", "Cities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Cities>("iCatalogDatabaseModel.City_User", "Cities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Country_User", "Countries")]
        public Countries Countries
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Countries>("iCatalogDatabaseModel.Country_User", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Countries>("iCatalogDatabaseModel.Country_User", "Countries").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Countries> CountriesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Countries>("iCatalogDatabaseModel.Country_User", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Countries>("iCatalogDatabaseModel.Country_User", "Countries", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "User_Device", "Devices")]
        public EntityCollection<Devices> Devices
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Devices>("iCatalogDatabaseModel.User_Device", "Devices");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Devices>("iCatalogDatabaseModel.User_Device", "Devices", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "User_UserCatalog", "UserCatalogs")]
        public EntityCollection<UserCatalogs> UserCatalogs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserCatalogs>("iCatalogDatabaseModel.User_UserCatalog", "UserCatalogs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserCatalogs>("iCatalogDatabaseModel.User_UserCatalog", "UserCatalogs", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="iCatalogDatabaseModel", Name="Visibility")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Visibility : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Visibility object.
        /// </summary>
        /// <param name="idVisibility">Initial value of the IdVisibility property.</param>
        public static Visibility CreateVisibility(global::System.Int32 idVisibility)
        {
            Visibility visibility = new Visibility();
            visibility.IdVisibility = idVisibility;
            return visibility;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdVisibility
        {
            get
            {
                return _IdVisibility;
            }
            set
            {
                if (_IdVisibility != value)
                {
                    OnIdVisibilityChanging(value);
                    ReportPropertyChanging("IdVisibility");
                    _IdVisibility = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdVisibility");
                    OnIdVisibilityChanged();
                }
            }
        }
        private global::System.Int32 _IdVisibility;
        partial void OnIdVisibilityChanging(global::System.Int32 value);
        partial void OnIdVisibilityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String VisibilityName
        {
            get
            {
                return _VisibilityName;
            }
            set
            {
                OnVisibilityNameChanging(value);
                ReportPropertyChanging("VisibilityName");
                _VisibilityName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("VisibilityName");
                OnVisibilityNameChanged();
            }
        }
        private global::System.String _VisibilityName;
        partial void OnVisibilityNameChanging(global::System.String value);
        partial void OnVisibilityNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String VisibilityDescription
        {
            get
            {
                return _VisibilityDescription;
            }
            set
            {
                OnVisibilityDescriptionChanging(value);
                ReportPropertyChanging("VisibilityDescription");
                _VisibilityDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("VisibilityDescription");
                OnVisibilityDescriptionChanged();
            }
        }
        private global::System.String _VisibilityDescription;
        partial void OnVisibilityDescriptionChanging(global::System.String value);
        partial void OnVisibilityDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> PercentOfVisibilityPages
        {
            get
            {
                return _PercentOfVisibilityPages;
            }
            set
            {
                OnPercentOfVisibilityPagesChanging(value);
                ReportPropertyChanging("PercentOfVisibilityPages");
                _PercentOfVisibilityPages = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PercentOfVisibilityPages");
                OnPercentOfVisibilityPagesChanged();
            }
        }
        private Nullable<global::System.Decimal> _PercentOfVisibilityPages;
        partial void OnPercentOfVisibilityPagesChanging(Nullable<global::System.Decimal> value);
        partial void OnPercentOfVisibilityPagesChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Visibility_CatalogHeader", "CatalogHeader")]
        public EntityCollection<CatalogHeader> CatalogHeader
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CatalogHeader>("iCatalogDatabaseModel.Visibility_CatalogHeader", "CatalogHeader");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CatalogHeader>("iCatalogDatabaseModel.Visibility_CatalogHeader", "CatalogHeader", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("iCatalogDatabaseModel", "Company_Visibility", "Companies")]
        public Companies Companies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_Visibility", "Companies").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_Visibility", "Companies").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Companies> CompaniesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Companies>("iCatalogDatabaseModel.Company_Visibility", "Companies");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Companies>("iCatalogDatabaseModel.Company_Visibility", "Companies", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
